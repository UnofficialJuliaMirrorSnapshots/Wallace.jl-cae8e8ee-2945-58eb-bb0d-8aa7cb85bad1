type: algorithm/simple_evolutionary_algorithm

evaluator<evaluator/simple>:
  objective: |
    f1 = get(i.vec)[1]
    g = 1 + sum(get(i.vec)[2:end]) * 9 / length(get(i.vec))
    f2 = g * (1 - sqrt(f1 / g))
    fitness(scheme, [f1, f2])

replacement<replacement/generational>: { elitism: 0 }

termination:
  iterations<criterion/iterations>: { limit: 15 }

_my_species:
  fitness<fitness/moga>:
    maximise: [false, false]
  stages:
    vec:
      representation<representation/float_vector>: { length: 12, min: 0.0, max: 1.0 }
  
_my_breeder<breeder/fast>:
  sources:
    s<selection>:
      operator<selection/tournament>: { size: 4 }
    x<variation>:
      operator<crossover/one_point>: { rate: 1.0 }
      source: s
      stage:  vec
    m<variation>:
      operator<mutation/gaussian>: { rate: 0.01, mean: 0.0, std: 1.0  }
      source: x
      stage:  vec

population:
  demes: 
    - capacity: 15
      species:  $(_my_species)
      breeder:  $(_my_breeder)
